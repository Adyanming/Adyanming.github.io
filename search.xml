<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker笔记</title>
      <link href="/Notepad/undefined.html"/>
      <url>/Notepad/undefined.html</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style> --><h1 id="Docker笔记"><a href="#Docker笔记" class="headerlink" title="Docker笔记"></a>Docker笔记</h1><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h2><p>要想让 Docker 帮我们安装和部署软件，肯定要保证你的机器上有 Docker. 由于大家的操作系统各不相同，安装方式也不同。为了便于大家学习，我们统一在 CentOS 的虚拟机中安装 Docker，统一学习环境。</p><h3 id="1-1-部署-MySQL"><a href="#1-1-部署-MySQL" class="headerlink" title="1.1.部署 MySQL"></a>1.1.部署 MySQL</h3><p>首先，我们利用 Docker 来安装一个 MySQL 软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。</p><p>如果是利用传统方式部署 MySQL，大概的步骤有：</p><ul><li>搜索并下载 MySQL 安装包</li><li>上传至 Linux 环境</li><li>编译和配置环境</li><li>安装</li></ul><p>而使用 Docker 安装，仅仅需要一步即可，在命令行输入下面的命令（建议采用 CV 大法）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line">  <span class="literal">--name</span> mysql \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">  <span class="literal">-e</span> TZ=Asia/Shanghai \</span><br><span class="line">  <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123</span> \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>运行效果如图：</p><p><img src="https://cdn.xf233.io/static/docker/static/UxK2beI0ros8O1xf2IJcWMvQnVb.png"></p><p>MySQL 安装完毕！通过任意客户端工具即可连接到 MySQL.</p><p>大家可以发现，当我们执行命令后，Docker 做的第一件事情，是去自动搜索并下载了 MySQL，然后会自动运行 MySQL，我们完全不用插手，是不是非常方便。</p><p>而且，这种安装方式你完全不用考虑运行的操作系统环境，它不仅仅在 CentOS 系统是这样，在 Ubuntu 系统、macOS 系统、甚至是装了 WSL 的 Windows 下，都可以使用这条命令来安装 MySQL。</p><p>要知道，<strong>不同操作系统下其安装包、运行环境是都不相同的</strong>！如果是<strong>手动安装，必须手动解决安装包不同、环境不同的、配置不同的问题</strong>！</p><p>而使用 Docker，这些完全不用考虑。就是因为 Docker 会自动搜索并下载 MySQL。注意：这里下载的不是安装包，而是<strong>镜像。</strong>镜像中不仅包含了 MySQL 本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为<strong>容器</strong>。</p><p>说明：</p><ul><li>镜像：英文是 image</li><li>容器：英文是 container</li></ul><p>Docker 会根据命令中的镜像名称自动搜索并下载镜像，那么问题来了，它是去哪里搜索和下载镜像的呢？这些镜像又是谁制作的呢？</p><p>Docker 官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。Docker 官方提供了一些基础镜像，然后各大软件公司又在基础镜像基础上，制作了自家软件的镜像，全部都存放在这个网站。这个网站就成了 Docker 镜像交流的社区：</p><p>基本上我们常用的各种软件都能在这个网站上找到，我们甚至可以自己制作镜像上传上去。</p><p>像这种提供存储、管理 Docker 镜像的服务器，被称为 DockerRegistry，可以翻译为镜像仓库。DockerHub 网站是官方仓库，阿里云、华为云会提供一些第三方仓库，我们也可以自己搭建私有的镜像仓库。</p><p>官方仓库在国外，下载速度较慢，一般我们都会使用第三方仓库提供的镜像加速功能，提高下载速度。而企业内部的机密项目，往往会采用私有镜像仓库。</p><p>总之，镜像的来源有两种：</p><ul><li>基于官方基础镜像自己制作</li><li>直接去 DockerRegistry 下载</li></ul><p>用一幅图标示如下：</p><h3 id="1-2-命令解读"><a href="#1-2-命令解读" class="headerlink" title="1.2.命令解读"></a>1.2.命令解读</h3><p>利用 Docker 快速的安装了 MySQL，非常的方便，不过我们执行的命令到底是什么意思呢？</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line">  <span class="literal">--name</span> mysql \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">  <span class="literal">-e</span> TZ=Asia/Shanghai \</span><br><span class="line">  <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123</span> \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><blockquote><p>解读：</p><ul><li><code>docker run -d</code> ：创建并运行一个容器，<code>-d</code> 则是让容器以后台进程运行</li><li><code>--name mysql </code> : 给容器起个名字叫 <code>mysql</code>，你可以叫别的</li><li><code>-p 3306:3306</code> : 设置端口映射。<ul><li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将<strong><strong>宿主机</strong></strong>端口****映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li><li>容器内端口往往是由容器内的进程决定，例如 MySQL 进程默认端口是 3306，因此容器内端口一定是 3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li><li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的 3306 映射到容器内的 3306 端口</li></ul></li><li><code>-e TZ=Asia/Shanghai</code> : 配置容器内进程运行时的一些参数<ul><li>格式：<code>-e KEY=VALUE</code>，KEY 和 VALUE 都由容器内进程决定</li><li>案例中，<code>TZ=Asia/Shanghai</code> 是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code> 是设置 MySQL 默认密码</li></ul></li><li><code>mysql</code> : 设置<strong>镜像</strong>名称，Docker 会根据这个名字搜索并下载镜像<ul><li>格式：<code>REPOSITORY:TAG</code>，例如 <code>mysql:8.0</code>，其中 <code>REPOSITORY</code> 可以理解为镜像名，<code>TAG</code> 是版本号</li><li>在未指定 <code>TAG</code> 的情况下，默认是最新版本，也就是 <code>mysql:latest</code></li></ul></li></ul></blockquote><p>镜像的名称不是随意的，而是要到 DockerRegistry 中寻找，镜像运行时的配置也不是随意的，要参考镜像的帮助文档，这些在 DockerHub 网站或者软件的官方网站中都能找到。</p><p>如果我们要安装其它软件，也可以到 DockerRegistry 中寻找对应的镜像名称和版本，阅读相关配置即可。</p><h2 id="2-Docker-基础"><a href="#2-Docker-基础" class="headerlink" title="2.Docker 基础"></a>2.Docker 基础</h2><p>接下来，我们一起来学习 Docker 使用的一些基础知识，为将来部署项目打下基础。具体用法可以参考 Docker 官方文档：</p><h3 id="2-1-常见命令"><a href="#2-1-常见命令" class="headerlink" title="2.1.常见命令"></a>2.1.常见命令</h3><p>首先我们来学习 Docker 中的常见命令，可以参考官方文档：</p><h4 id="2-1-1-命令介绍"><a href="#2-1-1-命令介绍" class="headerlink" title="2.1.1.命令介绍"></a>2.1.1.命令介绍</h4><p>其中，比较常见的命令有：</p><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker search</td><td>寻找镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/search/">docker search</a></td></tr><tr><td>docker pull</td><td>拉取镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td></tr><tr><td>docker login</td><td>登录DockerHub</td><td><a href="https://docs.docker.com/engine/reference/commandline/login/">docker login</a></td></tr><tr><td>docker push</td><td>推送镜像到 DockerRegistry</td><td><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td></tr><tr><td>docker images</td><td>查看本地镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td></tr><tr><td>docker rmi</td><td>删除本地镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td></tr><tr><td>docker run</td><td>创建并运行容器（不能重复创建）</td><td><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td></tr><tr><td>docker stop</td><td>停止指定容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td></tr><tr><td>docker start</td><td>启动指定容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td></tr><tr><td>docker restart</td><td>重新启动容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td></tr><tr><td>docker rm</td><td>删除指定容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/rm/">docs.docker.com</a></td></tr><tr><td>docker ps</td><td>查看容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td></tr><tr><td>docker logs</td><td>查看容器运行日志</td><td><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td></tr><tr><td>docker exec</td><td>进入容器</td><td><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td></tr><tr><td>docker cp</td><td>容器和宿主机文件拷贝</td><td><a href="https://docs.docker.com/engine/reference/commandline/cp/#usage">docker cp</a></td></tr><tr><td>docker save</td><td>保存镜像到本地压缩文件</td><td><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td></tr><tr><td>docker load</td><td>加载本地压缩文件到镜像</td><td><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td></tr><tr><td>docker inspect</td><td>查看容器详细信息</td><td><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td></tr></tbody></table><p><strong>补充：</strong></p><p>默认情况下，每次重启虚拟机我们都需要手动启动 Docker 和 Docker 中的容器。通过命令可以实现开机自启：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker容器开机自启</span></span><br><span class="line">docker update <span class="literal">--restart</span>=always [容器名/容器<span class="type">id</span>]</span><br></pre></td></tr></table></figure><h4 id="2-1-2-演示"><a href="#2-1-2-演示" class="headerlink" title="2.1.2.演示"></a>2.1.2.演示</h4><p>教学环节说明：我们以 Nginx 为例给大家演示上述命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，拉取Nginx镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第3步，查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果如下：</span></span><br><span class="line">_REPOSITORY   TAG       IMAGE ID       CREATED         SIZE_</span><br><span class="line">_nginx        latest    <span class="number">605</span>c77e624dd   <span class="number">16</span> months ago   <span class="number">141</span>MB_</span><br><span class="line">_mysql        latest    <span class="number">3218</span>b38490ce   <span class="number">17</span> months ago   <span class="number">516</span>MB_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第4步，创建并允许Nginx容器</span></span><br><span class="line">docker run <span class="literal">-d</span> <span class="literal">--name</span> nginx <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第5步，查看运行中容器</span></span><br><span class="line">docker <span class="built_in">ps</span></span><br><span class="line"><span class="comment"># 也可以加格式化方式访问，格式会更加清爽</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第6步，访问网页，地址：http://虚拟机地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第7步，停止容器</span></span><br><span class="line">docker stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第8步，查看所有容器</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第9步，再次启动nginx容器</span></span><br><span class="line">docker <span class="built_in">start</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第10步，再次查看容器</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第11步，查看容器详细信息</span></span><br><span class="line">docker inspect nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第12步，进入容器,查看容器内目录</span></span><br><span class="line">docker exec <span class="literal">-it</span> nginx bash</span><br><span class="line"><span class="comment"># 或者，可以进入MySQL</span></span><br><span class="line">docker exec <span class="literal">-it</span> mysql mysql <span class="literal">-uroot</span> <span class="literal">-p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第13步，删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line"><span class="comment"># 发现无法删除，因为容器运行中，强制删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> nginx</span><br></pre></td></tr></table></figure><h4 id="2-1-3-命令别名"><a href="#2-1-3-命令别名" class="headerlink" title="2.1.3.命令别名"></a>2.1.3.命令别名</h4><p>给常用 Docker 命令起别名，方便我们访问：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br><span class="line">内容如下：</span><br><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line">_alias <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span>_</span><br><span class="line">_alias <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span>_</span><br><span class="line">_alias <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span>_</span><br><span class="line">_alias dps=<span class="string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span>_</span><br><span class="line">_alias dis=<span class="string">&#x27;docker images&#x27;</span>_</span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line">_if [ -<span class="type">f</span> /<span class="type">etc</span>/<span class="type">bashrc</span> ]; then_</span><br><span class="line">_        . /etc/bashrc_</span><br><span class="line">_fi_</span><br></pre></td></tr></table></figure><p>然后，执行命令使别名生效</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /root/.bashrc</span><br></pre></td></tr></table></figure><p>接下来，试试看新的命令吧。</p><h4 id="2-1-4-将容器生成新的镜像"><a href="#2-1-4-将容器生成新的镜像" class="headerlink" title="2.1.4.将容器生成新的镜像"></a>2.1.4.将容器生成新的镜像</h4><blockquote><p>docker 启动一个镜像容器后， 可以在里面执行一些命令操作，然后使用<code>docker commit</code>将新的这个容器快照生成一个镜像。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=<span class="string">&quot;提交的描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> 容器ID 要创建的目标镜像名:[tag]</span><br></pre></td></tr></table></figure><p>Docker挂载主机目录，可能会出现报错：<code>cannot open directory .: Perission denied</code>。</p><p><em><strong>解决方案</strong></em>：在命令中加入参数 <code>--privileged=true</code>。</p><p>CentOS7安全模块比之前系统版本加强，不安全的会先禁止，目录挂载的情况被默认为不安全的行为，在SELinux里面挂载目录被禁止掉了。如果要开启，一般使用 <code>--privileged=true</code>，扩大容器的权限解决挂载没有权限的问题。也即使用该参数，容器内的root才拥有真正的root权限，否则容器内的root只是外部的一个普通用户权限。</p><h4 id="2-1-5-将新的镜像推送到DockerHub"><a href="#2-1-5-将新的镜像推送到DockerHub" class="headerlink" title="2.1.5.将新的镜像推送到DockerHub"></a>2.1.5.将新的镜像推送到DockerHub</h4><ol><li><p>登录DockerHub</p><ul><li><code>docker login</code></li></ul></li><li><p>给本地的镜像打上Tag</p><ul><li><code>docker tag &lt;local_image_id&gt; dockerhub_username/my-repo:latest</code></li></ul></li><li><p>将打上Tag的镜像上传到DockerHub</p><ul><li><code>docker push dockerhub_username/my-repo:latest</code></li></ul></li></ol><h3 id="2-2-数据卷"><a href="#2-2-数据卷" class="headerlink" title="2.2.数据卷"></a>2.2.数据卷</h3><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。大家思考几个问题：</p><ul><li>如果要升级 MySQL 版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li><li>MySQL、Nginx 容器运行后，如果我要修改其中的某些配置该怎么办？</li><li>我想要让 Nginx 代理我的静态资源怎么办？</li></ul><p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器****解耦</strong>。</p><h4 id="2-2-1-什么是数据卷"><a href="#2-2-1-什么是数据卷" class="headerlink" title="2.2.1.什么是数据卷"></a>2.2.1.什么是数据卷</h4><p><strong>数据卷（volume）</strong>是一个虚拟目录，是<strong>容器内目录</strong>与<strong>宿主机****目录</strong>之间映射的桥梁。</p><p>以 Nginx 为例，我们知道 Nginx 中有两个关键的目录：</p><ul><li><code>html</code>：放置一些静态资源</li><li><code>conf</code>：放置配置文件</li></ul><p>如果我们要让 Nginx 代理我们的静态资源，最好是放到 <code>html</code> 目录；如果我们要修改 Nginx 的配置，最好是找到 <code>conf</code> 下的 <code>nginx.conf</code> 文件。</p><p>但遗憾的是，容器运行的 Nginx 所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p><p>在上图中：</p><ul><li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li><li>Nginx 容器内部的 <code>conf</code> 目录和 <code>html</code> 目录分别与两个数据卷关联。</li><li>而数据卷 conf 和 html 分别指向了宿主机的 <code>/var/lib/docker/volumes/conf/_data</code> 目录和 <code>/var/lib/docker/volumes/html/_data</code> 目录</li></ul><p>这样以来，容器内的 <code>conf</code> 和 <code>html</code> 目录就 与宿主机的 <code>conf</code> 和 <code>html</code> 目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的 <code>/var/lib/docker/volumes/html/_data</code> 就是在操作容器内的 <code>/usr/share/nginx/html/_data</code> 目录。只要我们将静态资源放入宿主机对应目录，就可以被 Nginx 代理了。</p><h4 id="2-2-2-数据卷命令"><a href="#2-2-2-数据卷命令" class="headerlink" title="2.2.2.数据卷命令"></a>2.2.2.数据卷命令</h4><p>数据卷的相关命令有：</p><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td></tr><tr><td>docker volume ls</td><td>查看所有数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docs.docker.com</a></td></tr><tr><td>docker volume rm</td><td>删除指定数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docs.docker.com</a></td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docs.docker.com</a></td></tr><tr><td>docker volume prune</td><td>清除数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td></tr></tbody></table><p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p><p>教学<strong>演示环节</strong>：演示一下 nginx 的 html 目录挂载</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span></span><br><span class="line">docker run <span class="literal">-d</span> <span class="literal">--name</span> nginx <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> <span class="literal">-v</span> html:/usr/share/nginx/html nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后查看数据卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">_DRIVER    VOLUME NAME_</span><br><span class="line">_local     <span class="number">29524</span>ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f_</span><br><span class="line">_local     html_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看数据卷详情</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">_[<span class="type">_</span></span><br><span class="line"><span class="type">_</span>    &#123;<span class="type">_</span></span><br><span class="line"><span class="type">_</span>        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2024-05-17T19:57:08+08:00&quot;</span>,<span class="type">_</span></span><br><span class="line"><span class="type">_</span>        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,<span class="type">_</span></span><br><span class="line"><span class="type">_</span>        <span class="string">&quot;Labels&quot;</span>: <span class="type">null</span>,<span class="type">_</span></span><br><span class="line"><span class="type">_</span>        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,<span class="type">_</span></span><br><span class="line"><span class="type">_</span>        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,<span class="type">_</span></span><br><span class="line"><span class="type">_</span>        <span class="string">&quot;Options&quot;</span>: <span class="type">null</span>,<span class="type">_</span></span><br><span class="line"><span class="type">_</span>        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span><span class="type">_</span></span><br><span class="line"><span class="type">_</span>    &#125;<span class="type">_</span></span><br><span class="line"><span class="type">_</span>]_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看/var/lib/docker/volumes/html/_data目录</span></span><br><span class="line">ll /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 可以看到与nginx的html目录内容一样，结果如下：</span></span><br><span class="line">_总用量 __8_</span><br><span class="line">_<span class="literal">-rw-r--r--</span>. <span class="number">1</span> root root <span class="number">497</span> <span class="number">12</span>月 <span class="number">28</span> <span class="number">2021</span> <span class="number">50</span>x.html_</span><br><span class="line">_<span class="literal">-rw-r--r--</span>. <span class="number">1</span> root root <span class="number">615</span> <span class="number">12</span>月 <span class="number">28</span> <span class="number">2021</span> index.html_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.进入该目录，并随意修改index.html内容</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line">vi index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.打开页面，查看效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span></span><br><span class="line">docker exec <span class="literal">-it</span> nginx bash</span><br></pre></td></tr></table></figure><p>教学<strong>演示环节</strong>：演示一下 MySQL 的匿名数据卷</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看MySQL容器详细信息</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="comment"># 关注其中.Config.Volumes部分和.Mounts部分</span></span><br></pre></td></tr></table></figure><p>我们关注两部分内容，第一是 <code>.Config.Volumes</code> 部分：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">    <span class="attr">&quot;Volumes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;/var/lib/mysql&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以发现这个容器声明了一个本地目录，需要挂载数据卷，但是<strong>数据卷未定义</strong>。这就是匿名卷。</p><p>然后，我们再看结果中的 <code>.Mounts</code> 部分：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;volume&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以发现，其中有几个关键属性：</p><ul><li>Name：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串 hash 值。</li><li>Source：宿主机目录</li><li>Destination : 容器内的目录</li></ul><p>上述配置是将容器内的 <code>/var/lib/mysql</code> 这个目录，与数据卷 <code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code> 挂载。于是在宿主机中就有了 <code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code> 这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。</p><p>接下来，可以查看该目录下的 MySQL 的 data 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</span><br></pre></td></tr></table></figure><p>注意：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考 DockerHub 对应的页面</p><h4 id="2-2-3-挂载本地目录或文件"><a href="#2-2-3-挂载本地目录或文件" class="headerlink" title="2.2.3.挂载本地目录或文件"></a>2.2.3.挂载本地目录或文件</h4><p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载本地目录</span></span><br><span class="line">-v 本地目录:容器内目录</span><br><span class="line"><span class="comment"># 挂载本地文件</span></span><br><span class="line">-v 本地文件:容器内文件</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：本地目录或文件必须以 <code>/</code> 或 <code>./</code> 开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v mysql:/var/lib/mysql <span class="comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span></span><br><span class="line">-v ./mysql:/var/lib/mysql <span class="comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span></span><br></pre></td></tr></table></figure><p><strong>教学演示</strong>，删除并重新创建 mysql 容器，并完成本地目录挂载：</p><ul><li>挂载 <code>/root/mysql/data</code> 到容器内的 <code>/var/lib/mysql</code> 目录</li><li>挂载 <code>/root/mysql/init</code> 到容器内的 <code>/docker-entrypoint-initdb.d</code> 目录（初始化的 SQL 脚本目录）</li><li>挂载 <code>/root/mysql/conf</code> 到容器内的 <code>/etc/mysql/conf.d</code> 目录（这个是 MySQL 配置文件目录）</li></ul><p>在课前资料中已经准备好了 mysql 的 <code>init</code> 目录和 <code>conf</code> 目录：</p><p><img src="https://cdn.xf233.io/static/docker/static/KPD5btJQ1oYNJ0x4Dqnc7AjCn7g.png"></p><p>以及对应的初始化 SQL 脚本和配置文件：</p><p><img src="https://cdn.xf233.io/static/docker/static/MC3Xb7gcYo3IAix5wHMcfdImnKd.png"></p><p><img src="https://cdn.xf233.io/static/docker/static/TWpQbXl6wod9pVxc0iRctpCinUh.png"></p><p>其中，hm.cnf 主要是配置了 MySQL 的默认编码，改为 utf8mb4；而 hmall.sql 则是后面我们要用到的黑马商城项目的初始化 SQL 脚本。</p><p>我们直接将整个 mysql 目录上传至虚拟机的 <code>/root</code> 目录下：</p><p><img src="https://cdn.xf233.io/static/docker/static/PZNBbbpDEoK1fCxI0ygcXbUfnGb.png"></p><p>接下来，我们演示本地目录挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.删除原来的MySQL容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.进入root目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建并运行新mysql容器，挂载本地目录</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了</span></span><br><span class="line"><span class="built_in">ls</span> -l mysql</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">_总用量 4_</span><br><span class="line">_drwxr-xr-x. 2 root    root   20 5月  19 15:11 conf_</span><br><span class="line">_drwxr-xr-x. 7 polkitd root 4096 5月  19 15:11 data_</span><br><span class="line">_drwxr-xr-x. 2 root    root   23 5月  19 15:11 init_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span></span><br><span class="line"><span class="built_in">ls</span> -l data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.查看MySQL容器内数据</span></span><br><span class="line"><span class="comment"># 5.1.进入MySQL</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql mysql -uroot -p123</span><br><span class="line"><span class="comment"># 5.2.查看编码表</span></span><br><span class="line">show variables like <span class="string">&quot;%char%&quot;</span>;</span><br><span class="line"><span class="comment"># 5.3.结果，发现编码是utf8mb4没有问题</span></span><br><span class="line">_+--------------------------+--------------------------------+_</span><br><span class="line">_| Variable_name            | Value                          |_</span><br><span class="line">_+--------------------------+--------------------------------+_</span><br><span class="line">_| character_set_client     | utf8mb4                        |_</span><br><span class="line">_| character_set_connection | utf8mb4                        |_</span><br><span class="line">_| character_set_database   | utf8mb4                        |_</span><br><span class="line">_| character_set_filesystem | binary                         |_</span><br><span class="line">_| character_set_results    | utf8mb4                        |_</span><br><span class="line">_| character_set_server     | utf8mb4                        |_</span><br><span class="line">_| character_set_system     | utf8mb3                        |_</span><br><span class="line">_| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |_</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查看数据</span></span><br><span class="line"><span class="comment"># 6.1.查看数据库</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment"># 结果，hmall是黑马商城数据库</span></span><br><span class="line">_+--------------------+_</span><br><span class="line">_| Database           |_</span><br><span class="line">_+--------------------+_</span><br><span class="line">_| hmall              |_</span><br><span class="line">_| information_schema |_</span><br><span class="line">_| mysql              |_</span><br><span class="line">_| performance_schema |_</span><br><span class="line">_| sys                |_</span><br><span class="line">_+--------------------+_</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 6.2.切换到hmall数据库</span></span><br><span class="line">use hmall;</span><br><span class="line"><span class="comment"># 6.3.查看表</span></span><br><span class="line">show tables;</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">_+-----------------+_</span><br><span class="line">_| Tables_in_hmall |_</span><br><span class="line">_+-----------------+_</span><br><span class="line">_| address         |_</span><br><span class="line">_| cart            |_</span><br><span class="line">_| item            |_</span><br><span class="line">_| order           |_</span><br><span class="line">_| order_detail    |_</span><br><span class="line">_| order_logistics |_</span><br><span class="line">_| pay_order       |_</span><br><span class="line">_| user            |_</span><br><span class="line">_+-----------------+_</span><br><span class="line"><span class="comment"># 6.4.查看address表数据</span></span><br><span class="line">_+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+_</span><br><span class="line">_| <span class="built_in">id</span> | user_id | province | city   | town     | mobile      | street        | contact   | is_default | notes |_</span><br><span class="line">_+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+_</span><br><span class="line">_| 59 |       1 | 北京     | 北京   | 朝阳区    | 13900112222 | 金燕龙办公楼   | 李佳诚    | 0          | NULL  |_</span><br><span class="line">_| 60 |       1 | 北京     | 北京   | 朝阳区    | 13700221122 | 修正大厦       | 李佳红    | 0          | NULL  |_</span><br><span class="line">_| 61 |       1 | 上海     | 上海   | 浦东新区  | 13301212233 | 航头镇航头路   | 李佳星    | 1          | NULL  |_</span><br><span class="line">_| 63 |       1 | 广东     | 佛山   | 永春      | 13301212233 | 永春武馆       | 李晓龙    | 0          | NULL  |_</span><br><span class="line">_+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+_</span><br><span class="line">_4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)_</span><br></pre></td></tr></table></figure><h3 id="2-3-镜像"><a href="#2-3-镜像" class="headerlink" title="2.3.镜像"></a>2.3.镜像</h3><p>前面我们一直在使用别人准备好的镜像，那如果我要部署一个 Java 项目，把它打包为一个镜像该怎么做呢？</p><h4 id="2-3-1-镜像结构"><a href="#2-3-1-镜像结构" class="headerlink" title="2.3.1.镜像结构"></a>2.3.1.镜像结构</h4><p>要想自己构建镜像，必须先了解镜像的结构。</p><p>之前我们说过，镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。</p><p>因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p><p>举个例子，我们要从 0 部署一个 Java 应用，大概流程是这样：</p><ul><li>准备一个 linux 服务（CentOS 或者 Ubuntu 均可）</li><li>安装并配置 JDK</li><li>上传 Jar 包</li><li>运行 jar 包</li></ul><p>那因此，我们打包镜像也是分成这么几步：</p><ul><li>准备 Linux 运行环境（java 项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li><li>安装并配置 JDK</li><li>拷贝 jar 包</li><li>配置启动脚本</li></ul><p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p><p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一 id，称为 <strong>Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p><p>例如，第一步中需要的 Linux 运行环境，通用性就很强，所以 Docker 官方就制作了这样的只包含 Linux 运行环境的镜像。我们在制作 java 镜像时，就无需重复制作，直接使用 Docker 官方提供的 CentOS 或 Ubuntu 镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个 Java 项目的镜像结构如图所示：</p><p><img src="https://cdn.xf233.io/static/docker/static/HMEkbXMRyoVCY9xk7Kec3QqunOd.png"></p><h4 id="2-3-2-Dockerfile"><a href="#2-3-2-Dockerfile" class="headerlink" title="2.3.2.Dockerfile"></a>2.3.2.Dockerfile</h4><p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以 Docker 就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给 Docker 去执行即可。</p><p>而这种记录镜像结构的文件就称为 <strong>Dockerfile</strong>，其对应的语法可以参考官方文档：</p><p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p>其中的语法比较多，比较常用的有：</p><table><thead><tr><th><strong>指令</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>MAINTAINER</strong></td><td>镜像维护者的姓名和邮箱地址（非必须）</td><td><code>MAINTAINER sufeng admin@xf233.io</code></td></tr><tr><td><strong>FROM</strong></td><td>指定基础镜像</td><td><code>FROM centos:6</code></td></tr><tr><td><strong>WORKDIR</strong></td><td>指定在创建容器后， 终端默认登录进来的工作目录</td><td><code>WORKDIR $CATALINA_HOME</code> <code>ENV CATALINA_HOME /usr/local/tomcat </code></td></tr><tr><td><strong>ENV</strong></td><td>设置环境变量，可在后面指令使用</td><td><code>ENV key value</code></td></tr><tr><td><strong>COPY</strong></td><td>拷贝本地文件到镜像的指定目录</td><td><code>COPY ./xx.jar /tmp/app.jar</code></td></tr><tr><td><strong>ADD</strong></td><td>将宿主机目录下（或远程文件）的文件拷贝进镜像，且会自动处理URL和解压tar压缩包。</td><td></td></tr><tr><td><strong>RUN</strong></td><td>执行 Linux 的 shell 命令，一般是安装过程的命令</td><td><code>RUN yum install gcc</code></td></tr><tr><td><strong>EXPOSE</strong></td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td><code>EXPOSE 8080</code></td></tr><tr><td><strong>USER</strong></td><td>指定该镜像以用户去执行，如果不指定，默认是<code>root</code></td><td>（一般不修改该配置）</td></tr><tr><td><strong>ENTRYPOINT</strong></td><td>镜像中应用的启动命令，容器运行时调用</td><td><code>ENTRYPOINT java -jar xx.ja</code></td></tr><tr><td><strong>CMD</strong></td><td>指定容器启动后要干的事情</td><td><code>CMD echo &quot;hello world&quot;</code></td></tr></tbody></table><p>例如，要基于 Ubuntu 镜像来构建一个 Java 应用，其 Dockerfile 内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录、容器内时区</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="comment"># 指定项目监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>同学们思考一下：以后我们会有很多很多 java 项目需要打包为镜像，他们都需要 Linux 系统环境、JDK 环境这两层，只有上面的 3 层不同（因为 jar 包不同）。如果每次制作 java 镜像都重复制作前两层镜像，是不是很麻烦。</p><p>所以，就有人提供了基础的系统加 JDK 环境，我们在此基础上制作 java 镜像，就可以省去 JDK 的配置了：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker-demo.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>是不是简单多了。</p><h4 id="2-3-3-构建镜像"><a href="#2-3-3-构建镜像" class="headerlink" title="2.3.3.构建镜像"></a>2.3.3.构建镜像</h4><p>当 Dockerfile 文件写好以后，就可以利用命令来构建镜像了。</p><p>在课前资料中，我们准备好了一个 demo 项目及对应的 Dockerfile：</p><p><img src="https://cdn.xf233.io/static/docker/static/IaXXbRyruofsyqxkXy3cuJBinuf.png"></p><p>首先，我们将课前资料提供的 <code>docker-demo.jar</code> 包以及 <code>Dockerfile</code> 拷贝到虚拟机的 <code>/root/demo</code> 目录：</p><p><img src="https://cdn.xf233.io/static/docker/static/DaNxbwN84o7mElx7p48cQSSSnre.png"></p><p>然后，执行命令，构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入镜像目录</span></span><br><span class="line"><span class="built_in">cd</span> /root/demo</span><br><span class="line"><span class="comment"># 开始构建</span></span><br><span class="line">docker build -t docker-demo:1.0 .</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li><code>docker build </code>: 就是构建一个 docker 镜像</li><li><code>-t docker-demo:1.0</code> ：<code>-t</code> 参数是指定镜像的名称（<code>repository</code> 和 <code>tag</code>）</li><li><code>.</code> : 最后的点是指构建时 Dockerfile 所在路径，由于我们进入了 demo 目录，所以指定的是 <code>.</code> 代表当前目录，也可以直接指定 Dockerfile 目录：</li></ul><h4 id="2-3-4-直接指定-Dockerfile-目录"><a href="#2-3-4-直接指定-Dockerfile-目录" class="headerlink" title="2.3.4.直接指定 Dockerfile 目录"></a>2.3.4.直接指定 Dockerfile 目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker build -t docker-demo:1.0 /root/demo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.xf233.io/static/docker/static/GDj2bsx1soD4yux7xKZcWpz1nhe.png"></p><p>查看镜像列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看镜像列表：</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment">## 结果</span></span><br><span class="line">_REPOSITORY    TAG       IMAGE ID       CREATED          SIZE_</span><br><span class="line">_docker-demo   1.0       d6ab0b9e64b9   27 minutes ago   327MB_</span><br><span class="line">_nginx         latest    605c77e624dd   16 months ago    141MB_</span><br><span class="line">_mysql         latest    3218b38490ce   17 months ago    516MB_</span><br></pre></td></tr></table></figure><p>然后尝试运行该镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1.创建并运行容器</span></span><br><span class="line">docker run -d --name <span class="built_in">dd</span> -p 8090:8090 docker-demo:1.0</span><br><span class="line"><span class="comment">## 2.查看容器</span></span><br><span class="line">dps</span><br><span class="line">_# 结果_</span><br><span class="line">_CONTAINER ID   IMAGE             PORTS                                                  STATUS         NAMES_</span><br><span class="line">_78a000447b49   docker-demo:1.0   0.0.0.0:8080-&gt;8080/tcp, :::8090-&gt;8090/tcp              Up 2 seconds   dd_</span><br><span class="line">_f63cfead8502   mysql             0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   Up 2 hours     mysql_</span><br><span class="line"></span><br><span class="line"><span class="comment">## 3.访问</span></span><br><span class="line">curl localhost:8080/hello/count</span><br><span class="line">_# 结果：_</span><br><span class="line">_&lt;h5&gt;欢迎访问黑马商城, 这是您第1次访问&lt;h5&gt;_</span><br></pre></td></tr></table></figure><h3 id="2-4-网络"><a href="#2-4-网络" class="headerlink" title="2.4.网络"></a>2.4.网络</h3><p>上节课我们创建了一个 Java 项目的容器，而 Java 项目往往需要访问其它各种中间件，例如 MySQL、Redis 等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p><p>首先，我们查看下 MySQL 容器的详细信息，重点关注其中的网络 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="comment"># 也可以使用format过滤结果</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> mysql</span><br><span class="line"><span class="comment"># 得到IP地址如下：</span></span><br><span class="line">172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后通过命令进入dd容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">dd</span> bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.在容器内，通过ping命令测试网络</span></span><br><span class="line">ping 172.17.0.2</span><br><span class="line">_# 结果_</span><br><span class="line">_PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data._</span><br><span class="line">_64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms_</span><br><span class="line">_64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms_</span><br><span class="line">_64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms_</span><br></pre></td></tr></table></figure><p>发现可以互联，没有问题。</p><p>但是，容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能 MySQL 容器的 IP 会发生变化，连接会失败。</p><p>所以，我们必须借助于 docker 的网络功能来解决这个问题，官方文档：</p><p><a href="https://docs.docker.com/engine/reference/commandline/network/">https://docs.docker.com/engine/reference/commandline/network/</a></p><h4 id="2-4-1-常见命令"><a href="#2-4-1-常见命令" class="headerlink" title="2.4.1.常见命令"></a>2.4.1.常见命令</h4><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker network create</td><td>创建一个网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td>docker network ls</td><td>查看所有网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td></tr><tr><td>docker network rm</td><td>删除指定网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td></tr><tr><td>docker network prune</td><td>清除未使用的网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td></tr><tr><td>docker network connect</td><td>使指定容器连接加入某网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td></tr><tr><td>docker network disconnect</td><td>使指定容器连接离开某网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td>docker network inspect</td><td>查看网络详细信息</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table><h4 id="2-4-2-教学演示：自定义网络"><a href="#2-4-2-教学演示：自定义网络" class="headerlink" title="2.4.2.教学演示：自定义网络"></a>2.4.2.教学演示：自定义网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1.首先通过命令创建一个网络</span></span><br><span class="line">docker network create hmall</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.然后查看网络</span></span><br><span class="line">docker network <span class="built_in">ls</span></span><br><span class="line"><span class="comment">## 结果：</span></span><br><span class="line">_NETWORK ID     NAME      DRIVER    SCOPE_</span><br><span class="line">_639bc44d0a87   bridge    bridge    local_</span><br><span class="line">_403f16ec62a2   hmall     bridge    local_</span><br><span class="line">_0dc0f72a0fbb   host      host      local_</span><br><span class="line">_cd8d3e8df47b   none      null      local_</span><br><span class="line"><span class="comment">## 其中，除了hmall以外，其它都是默认的网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span></span><br><span class="line"><span class="comment">## 这样该网络内的其它容器可以用别名互相访问！</span></span><br><span class="line"><span class="comment">## 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span><br><span class="line">docker network connect hmall mysql --<span class="built_in">alias</span> db</span><br><span class="line"><span class="comment">## 3.2.db容器，也就是我们的java项目</span></span><br><span class="line">docker network connect hmall <span class="built_in">dd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 4.进入dd容器，尝试利用别名访问db</span></span><br><span class="line"><span class="comment">## 4.1.进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">dd</span> bash</span><br><span class="line"><span class="comment">## 4.2.用db别名访问</span></span><br><span class="line">ping db</span><br><span class="line"><span class="comment">## 结果</span></span><br><span class="line">_PING db (172.18.0.2) 56(84) bytes of data._</span><br><span class="line">_64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms_</span><br><span class="line">_64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms_</span><br><span class="line"><span class="comment">## 4.3.用容器名访问</span></span><br><span class="line">ping mysql</span><br><span class="line"><span class="comment">## 结果：</span></span><br><span class="line">_PING mysql (172.18.0.2) 56(84) bytes of data._</span><br><span class="line">_64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms_</span><br><span class="line">_64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms_</span><br></pre></td></tr></table></figure><p>OK，现在无需记住 IP 地址也可以实现容器互联了。</p><h4 id="2-4-3-总结："><a href="#2-4-3-总结：" class="headerlink" title="2.4.3.总结："></a>2.4.3.总结：</h4><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li><li>在同一个自定义网络中的容器，可以通过别名互相访问</li></ul><h2 id="3-DockerCompose"><a href="#3-DockerCompose" class="headerlink" title="3.DockerCompose"></a>3.DockerCompose</h2><p>大家可以看到，我们部署一个简单的 java 项目，其中包含 3 个容器：</p><ul><li>MySQL</li><li>Nginx</li><li>Java 项目</li></ul><p>而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止 3 个。如果还像之前那样手动的逐一部署，就太麻烦了。</p><p>而 Docker Compose 就可以帮助我们实现<strong>多个相互关联的 Docker 容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p><h3 id="3-1-基本语法"><a href="#3-1-基本语法" class="headerlink" title="3.1.基本语法"></a>3.1.基本语法</h3><p>docker-compose.yml 文件的基本语法可以参考官方文档：</p><p>docker-compose 文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于 service 就是在定义某个应用的运行时参数，因此与 <code>docker run</code> 参数非常相似。</p><p>举例来说，用 docker run 部署 MySQL 的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  --network hmall</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>如果用 <code>docker-compose.yml</code> 文件来定义，就是这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">new</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">new:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure><p>对比如下：</p><table><thead><tr><th><strong>docker run 参数</strong></th><th><strong>docker compose 指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>–name</td><td>container_name</td><td>容器名称</td></tr><tr><td>-p</td><td>ports</td><td>端口映射</td></tr><tr><td>-e</td><td>environment</td><td>环境变量</td></tr><tr><td>-v</td><td>volumes</td><td>数据卷配置</td></tr><tr><td>–network</td><td>networks</td><td>网络</td></tr></tbody></table><p>明白了其中的对应关系，相信编写 <code>docker-compose</code> 文件应该难不倒大家。</p><p>黑马商城部署文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">  <span class="attr">hmall:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18080:18080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18081:18081&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hm-net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure><h3 id="3-2-基础命令"><a href="#3-2-基础命令" class="headerlink" title="3.2.基础命令"></a>3.2.基础命令</h3><p>编写好 docker-compose.yml 文件，就可以部署项目了。常见的命令：</p><p>基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure><p>其中，OPTIONS 和 COMMAND 都是可选参数，比较常见的有：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>参数或指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Options</td><td>-f</td><td>指定 compose 文件的路径和名称</td></tr><tr><td></td><td>-p</td><td>指定 project 名称。project 就是当前 compose 文件中设置的多个 service 的集合，是逻辑概念</td></tr><tr><td>Commands</td><td>up</td><td>创建并启动所有 service 容器</td></tr><tr><td></td><td>down</td><td>停止并移除所有容器、网络</td></tr><tr><td></td><td>ps</td><td>列出所有启动的容器</td></tr><tr><td></td><td>logs</td><td>查看指定容器的日志</td></tr><tr><td></td><td>stop</td><td>停止容器</td></tr><tr><td></td><td>start</td><td>启动容器</td></tr><tr><td></td><td>restart</td><td>重启容器</td></tr><tr><td></td><td>top</td><td>查看运行的进程</td></tr><tr><td></td><td>exec</td><td>在指定的运行中容器中执行命令</td></tr></tbody></table><p>教学演示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1.进入root目录</span></span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.删除旧容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -qa)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 3.删除hmall镜像</span></span><br><span class="line">docker rmi hmall</span><br><span class="line"></span><br><span class="line"><span class="comment">## 4.清空MySQL数据</span></span><br><span class="line"><span class="built_in">rm</span> -rf mysql/data</span><br><span class="line"></span><br><span class="line"><span class="comment">## 5.启动所有, -d 参数是后台启动</span></span><br><span class="line">docker compose up -d</span><br><span class="line"><span class="comment">## 结果：</span></span><br><span class="line">_[+] Building 15.5s (8/8) FINISHED_</span><br><span class="line">_ =&gt; [internal] load build definition from Dockerfile                                    0.0s_</span><br><span class="line">_ =&gt; =&gt; transferring dockerfile: 358B                                                    0.0s_</span><br><span class="line">_ =&gt; [internal] load .dockerignore                                                       0.0s_</span><br><span class="line">_ =&gt; =&gt; transferring context: 2B                                                         0.0s_</span><br><span class="line">_ =&gt; [internal] load metadata <span class="keyword">for</span> docker.io/library/openjdk:11.0-jre-buster             15.4s_</span><br><span class="line">_ =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s_</span><br><span class="line">_ =&gt; [internal] load build context                                                       0.0s_</span><br><span class="line">_ =&gt; =&gt; transferring context: 98B                                                        0.0s_</span><br><span class="line">_ =&gt; CACHED [2/3] RUN <span class="built_in">ln</span> -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span>   0.0s_</span><br><span class="line">_ =&gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s_</span><br><span class="line">_ =&gt; exporting to image                                                                  0.0s_</span><br><span class="line">_ =&gt; =&gt; exporting layers                                                                 0.0s_</span><br><span class="line">_ =&gt; =&gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s_</span><br><span class="line">_ =&gt; =&gt; naming to docker.io/library/root-hmall                                           0.0s_</span><br><span class="line">_[+] Running 4/4_</span><br><span class="line">_ ✔ Network hmall    Created                                                             0.2s_</span><br><span class="line">_ ✔ Container mysql  Started                                                             0.5s_</span><br><span class="line">_ ✔ Container hmall  Started                                                             0.9s_</span><br><span class="line">_ ✔ Container nginx  Started     _                                                        1.5s</span><br><span class="line"></span><br><span class="line"><span class="comment">## 6.查看镜像</span></span><br><span class="line">docker compose images</span><br><span class="line"><span class="comment">## 结果</span></span><br><span class="line">_CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE_</span><br><span class="line">_hmall               root-hmall          latest              32eebee16acd        362MB_</span><br><span class="line">_mysql               mysql               latest              3218b38490ce        516MB_</span><br><span class="line">_nginx               nginx               latest              605c77e624dd        141MB_</span><br><span class="line"></span><br><span class="line"><span class="comment">## 7.查看容器</span></span><br><span class="line">docker compose ps</span><br><span class="line"><span class="comment">## 结果</span></span><br><span class="line">_NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS_</span><br><span class="line">_hmall               root-hmall          <span class="string">&quot;java -jar /app.jar&quot;</span>     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp_</span><br><span class="line">_mysql               mysql               <span class="string">&quot;docker-entrypoint.s…&quot;</span>   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp_</span><br><span class="line">_nginx               nginx               <span class="string">&quot;/docker-entrypoint.…&quot;</span>   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&gt;18080-18081/tcp, :::18080-18081-&gt;18080-18081/tcp_</span><br></pre></td></tr></table></figure><p>打开浏览器，访问：http:&#x2F;&#x2F;[yourIp]:8080</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 技术 </tag>
            
            <tag> 技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Hexo] 用Gulp压缩博客</title>
      <link href="/Notepad/70e0c8d1.html"/>
      <url>/Notepad/70e0c8d1.html</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style> --><h2 id="Gulp简介"><a href="#Gulp简介" class="headerlink" title="Gulp简介"></a>Gulp简介</h2><p>一个可以自动压缩 HTML、JS、CSS 文件、图片，<br>可以将 ES6 语法转换成 ES5，减少网络请求，同时降低网络负担</p><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>首先全局安装 gulp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-cli</span><br></pre></td></tr></table></figure><p>安装压缩 <code>HTML</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install --save gulp-html-minifier-terser</span><br></pre></td></tr></table></figure><p>安装压缩 CSS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-clean-css --save-dev</span><br></pre></td></tr></table></figure><p>安装压缩 JS<br>这里我选择 gulp-uglify + gulp-babel，可以把 ES6 转换成 ES5，因为兼容所以选择</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-uglify</span><br><span class="line">npm install --save-dev gulp-babel @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure><p>插件都安装完毕后，在博客的根目录创建文件：<code>gulpfile.js</code><br>然后粘贴代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-html-minifier-terser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>)</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;compress&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">  gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>().<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">cleanCSS</span>(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie11&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,   <span class="comment">// 清除 html 注释</span></span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">// 压缩 html</span></span><br><span class="line">            <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 省略布尔属性的值，例如：&lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 删除所有空格作属性值，例如：&lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 删除&lt;script&gt;的type=&quot;text/javascript&quot;</span></span><br><span class="line">            <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 删除&lt;style&gt;和&lt;link&gt;的 type=&quot;text/css&quot;</span></span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">// 压缩页面 JS</span></span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">// 压缩页面 CSS</span></span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span> <span class="comment">// 压缩页面 URL</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行gulp命令时依次执行以下任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">parallel</span>(</span><br><span class="line">  <span class="string">&#x27;compress&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-html&#x27;</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><h3 id="使用压缩方法"><a href="#使用压缩方法" class="headerlink" title="使用压缩方法"></a>使用压缩方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl; hexo g; gulp; hexo d</span><br></pre></td></tr></table></figure><h3 id="错误信息解析"><a href="#错误信息解析" class="headerlink" title="错误信息解析"></a>错误信息解析</h3><p><strong>Local gulp not found in ~\Desktop\xxx</strong></p><ul><li>这表示在 ~\Desktop\xxx 这个项目目录中，Gulp 工具没有被安装。</li></ul><p><strong>Try running: npm install gulp</strong></p><ul><li>这是一个建议，提示你可以通过运行 npm install gulp 来安装 Gulp，这样本地的 Gulp 工具就会被正确安装到项目的 node_modules 目录中。</li></ul><p>1.安装 Gulp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp</span><br></pre></td></tr></table></figure><p>2.检查项目的 package.json 文件</p><ul><li>确保你的项目的 package.json 文件中有 Gulp 的依赖。如果没有，你可以手动添加：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;gulp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.2&quot;</span>  <span class="comment">// 你可以指定适合你的版本</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><p><strong>如果你想从项目中删除 Gulp 和相关的依赖，可以按照以下步骤操作：</strong></p><ol><li>删除本地 <code>Gulp</code></li></ol><ul><li>在项目根目录下，打开终端（命令行），然后运行以下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall gulp --save-dev</span><br></pre></td></tr></table></figure><ul><li>这会从 <code>node_modules</code> 文件夹和 <code>package.json</code> 的 <code>devDependencies</code> 中删除 Gulp。</li></ul><ol start="2"><li>删除 Gulp 插件</li></ol><ul><li>如果你安装了其他 Gulp 插件（如 gulp-clean-css、gulp-uglify 等），也可以通过以下命令逐个删除：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall gulp-clean-css gulp-uglify gulp-htmlmin gulp-sass --save-dev</span><br></pre></td></tr></table></figure><ul><li>根据你实际安装的插件，调整命令中的插件名称。</li></ul><ol start="3"><li>删除全局 Gulp（如果安装了全局版本）</li></ol><ul><li>如果你全局安装了 Gulp（通过 -g 参数），可以运行以下命令卸载全局 Gulp：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g gulp</span><br></pre></td></tr></table></figure><ol start="4"><li>删除 Gulp 配置文件</li></ol><ul><li>如果你的项目中有 gulpfile.js 文件，可以将其删除。如果你不再使用 Gulp，这个文件是多余的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> gulpfile.js</span><br></pre></td></tr></table></figure><ol start="5"><li>删除其他相关文件（可选）</li></ol><blockquote><p>如果你使用了 <code>Gulp</code> 的任务配置文件或其他相关文件，可以根据需要删除它们。一般来说，这些文件包括：</p><blockquote><p>gulpfile.js<br>任何与 Gulp 相关的配置文件</p></blockquote></blockquote><ol start="6"><li>清理 npm 缓存（可选）<br>虽然通常不是必需的，但如果你希望清理缓存以释放空间，可以运行以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><ol start="7"><li>确保更新 package.json</li></ol><ul><li>在卸载 Gulp 和插件之后，package.json 文件中的 devDependencies 部分会自动更新，删除相关的 Gulp 和插件条目。你可以手动检查 package.json，确保不再列出这些依赖。</li></ul><ol start="8"><li>确保项目正常运行</li></ol><ul><li>在删除 Gulp 及其相关插件后，确保你的项目可以正常构建和运行。如果你之前的构建任务依赖于 Gulp，可能需要重新配置构建流程或者使用其他工具来替代 Gulp。</li></ul><ol start="9"><li>使用命令行来列出已安装的 npm 包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list --depth=0</span><br></pre></td></tr></table></figure><ul><li>这个命令会列出所有直接安装的包（包括 Hexo 插件）及其版本号。</li></ul><ol start="10"><li>卸载未使用的插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall &lt;plugin-name&gt; --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Hexo] 博客</title>
      <link href="/Notepad/fc655f6c.html"/>
      <url>/Notepad/fc655f6c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-GitHub-Cloudflare部署指南"><a href="#Hexo-GitHub-Cloudflare部署指南" class="headerlink" title="Hexo + GitHub + Cloudflare部署指南"></a><strong>Hexo + GitHub + Cloudflare部署指南</strong></h1><hr><h2 id="1-软件支持"><a href="#1-软件支持" class="headerlink" title="1. 软件支持"></a>1. 软件支持</h2><ul><li><strong>Node：</strong><a href="https://nodejs.org/en">官网</a>，<a href="https://zhoudx.lanzouk.com/iCvtz29k9zbc">蓝奏云</a></li><li><strong>Git：</strong> <a href="https://git-scm.com/download/win">官网</a>，<a href="https://zhoudx.lanzouk.com/i3S3f29k9yfa">蓝奏云</a></li><li><strong>VSCode：</strong> <a href="https://code.visualstudio.com/">官网</a>，<a href="https://zhoudx.lanzouk.com/iZJee29k9wjc">蓝奏云</a></li></ul><h2 id="2-安装-Node"><a href="#2-安装-Node" class="headerlink" title="2. 安装 Node"></a>2. 安装 Node</h2><ul><li>打开 <code>Node 官网</code>，下载适合你系统的 Node 安装程序。下载后安装，建议使用默认目录 <code>C:/Program Files/nodejs/</code>。</li><li>安装完成后，检查是否安装成功。按下 <code>Win + R</code> 键，输入 <code>CMD</code>，然后回车，打开 CMD 窗口，执行 <code>node -v</code> 命令，看到版本信息则说明安装成功。</li><li>修改 npm 源。npm 下载模块默认从国外服务器下载，速度较慢，建议配置成华为云镜像源。打开 CMD 窗口，运行如下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://mirrors.huaweicloud.com/repository/npm/</span><br></pre></td></tr></table></figure><h2 id="3-安装-Git"><a href="#3-安装-Git" class="headerlink" title="3. 安装 Git"></a>3. 安装 Git</h2><ul><li>进入 <a href="https://git-scm.com/download/win">Git 官网</a> 下载适合你系统的安装程序，下载后傻瓜式安装即可，建议使用默认目录 <code>C:/Program Files/Git</code>。</li><li>安装后，你可以在 <strong>开始菜单</strong> 找到以下工具：</li></ul><blockquote><p><code>Git CMD</code>：Windows 命令行的指令风格<br><code>Git Bash</code>：Linux 系统的指令风格<code>（建议使用）</code><br><code>Git GUI</code>：图形化界面（新手学习不建议使用）</p></blockquote><h2 id="4-配置-Git-密钥并连接至-GitHub"><a href="#4-配置-Git-密钥并连接至-GitHub" class="headerlink" title="4. 配置 Git 密钥并连接至 GitHub"></a>4. 配置 Git 密钥并连接至 GitHub</h2><p><strong>常用 Git 命令</strong></p><ul><li>查看所有配置：<code>git config -l</code></li><li>查看系统配置：<code>git config --system --list</code></li><li>查看用户（全局）配置：<code>git config --global --list</code></li></ul><p><strong>配置用户名和邮箱</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p><strong>通过 <code>git config -l</code> 检查是否配置成功。</strong></p><h2 id="5-配置公钥连接-GitHub"><a href="#5-配置公钥连接-GitHub" class="headerlink" title="5. 配置公钥连接 GitHub"></a>5. 配置公钥连接 GitHub</h2><p><strong>生成 SSH 密钥：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>提示 <code>Enter file in which to save the key</code> 时直接回车，新手不推荐设置密钥密码。</strong></li><li><strong>打开 <code>C:\Users\Administrator\.ssh</code> 文件夹，会看到以下文件：</strong></li><li><strong>id_rsa（私钥）</strong></li><li><strong>id_rsa.pub（公钥）</strong></li><li><strong>用记事本打开 <code>id_rsa.pub</code> 文件，复制里面的内容，然后在 GitHub 中配置 SSH 密钥。</strong></li></ul><p><strong>测试连接github是否成功，输入以下命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><strong>第一次连接会提示 <code>Are you sure you want to continue connecting (yes/no/[fingerprint])?</code>，输入 <code>yes</code> 即可。如果看到连接到账户的信息，说明配置成功。</strong></p><h2 id="6-安装-Hexo"><a href="#6-安装-Hexo" class="headerlink" title="6. 安装 Hexo"></a>6. 安装 Hexo</h2><p><strong>在 Hexo  根目录使用 Git Bash 中输入如下命令安装 Hexo：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli &amp;&amp; hexo -v</span><br></pre></td></tr></table></figure><ul><li><strong>安装完成后，输入 <code>hexo -v</code> 验证是否安装成功。</strong></li></ul><h3 id="7-初始化-Hexo-项目并安装依赖"><a href="#7-初始化-Hexo-项目并安装依赖" class="headerlink" title="7. 初始化 Hexo 项目并安装依赖"></a>7. 初始化 Hexo 项目并安装依赖</h3><p><strong>初始化 Hexo 项目：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog-demo</span><br><span class="line"><span class="built_in">cd</span> blog-demo</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p><strong>项目结构说明：</strong></p><ul><li>node_modules：依赖包</li><li>scaffolds：生成文章的模板</li><li>source：存放文章的目录</li><li>themes：主题</li><li>.npmignore：发布时忽略的文件（可忽略）</li><li>_config.landscape.yml：主题配置文件</li><li>config.yml：博客配置文件</li><li>package.json：项目名称、描述、版本、运行和开发等信息</li></ul><p><strong>启动项目：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p><strong>打开浏览器，输入地址 <code>http://localhost:4000/</code>，如果看到预期效果，则说明博客已成功构建。</strong></p><h2 id="8-将静态博客挂载到-GitHub-Pages"><a href="#8-将静态博客挂载到-GitHub-Pages" class="headerlink" title="8. 将静态博客挂载到 GitHub Pages"></a>8. 将静态博客挂载到 GitHub Pages</h2><p><strong>安装 Hexo 部署插件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><strong>编辑文章并预览：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure><p><strong>确认无误后使用以下命令，将本地文章推送至GitHub仓库即可：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl; hexo g; hexo d</span><br></pre></td></tr></table></figure><h2 id="8-Vscode-终端首次执行报错解决"><a href="#8-Vscode-终端首次执行报错解决" class="headerlink" title="8. Vscode 终端首次执行报错解决"></a>8. Vscode 终端首次执行报错解决</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><ul><li><strong>请用 <code>管理员模式</code> 打开 <code>Windows PowerShell</code> 输入代码即可，按 Y 回车。</strong></li></ul><hr><h2 id="9-安装butterfly主题"><a href="#9-安装butterfly主题" class="headerlink" title="9. 安装butterfly主题"></a>9. 安装<code>butterfly</code>主题</h2><p><strong>在你的 <code>Hexo</code> 根目录安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p><strong>应用主题：</strong></p><ul><li><strong>修改 <code>Hexo</code> 根目录下的 <code>_config.yml</code>，把主题改为 <code>butterfly</code></strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li></ul><p><strong>安装插件：</strong></p><ul><li><strong>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><ul><li><strong>在 hexo 的根目录创建一个文件 _config.butterfly.yml，并把 <code>butterfly</code> 主题目录的 _config.yml 内容复制到 _config.butterfly.yml 去。( 注意: 复制的是 <code>butterfly</code> 主题的 <code>_config.yml</code> ，而不是 <code>hexo</code> 的 <code>_config.yml</code>)</strong></li><li><strong>注意： 以后只需要在 _config.butterfly.yml 进行配置就行。</strong></li><li><strong>如果使用了 _config.butterfly.yml， 配置主题的 _config.yml 将不会有效果。</strong></li></ul><blockquote><p>注意： 不要把主题目录的 _config.yml 删掉。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Hexo] 免费图床</title>
      <link href="/Notepad/3873c0b1.html"/>
      <url>/Notepad/3873c0b1.html</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style> --><h1 id="一些常用免费图床汇总-整理"><a href="#一些常用免费图床汇总-整理" class="headerlink" title="一些常用免费图床汇总(整理)"></a>一些常用免费图床汇总(整理)</h1><h4 id="有条件还是推荐自己搭建一个，毕竟较隐私图片和一些二维码图等，自己搭不会容易挂。然后也算是因为博客文章等用免费的走过一些弯路，毕竟一定时间精力等因素限制范围内，免费的永远是最贵的！"><a href="#有条件还是推荐自己搭建一个，毕竟较隐私图片和一些二维码图等，自己搭不会容易挂。然后也算是因为博客文章等用免费的走过一些弯路，毕竟一定时间精力等因素限制范围内，免费的永远是最贵的！" class="headerlink" title="有条件还是推荐自己搭建一个，毕竟较隐私图片和一些二维码图等，自己搭不会容易挂。然后也算是因为博客文章等用免费的走过一些弯路，毕竟一定时间精力等因素限制范围内，免费的永远是最贵的！"></a>有条件还是推荐自己搭建一个，毕竟较隐私图片和一些二维码图等，自己搭不会容易挂。然后也算是因为博客文章等用免费的走过一些弯路，毕竟一定时间精力等因素限制范围内，免费的永远是最贵的！</h4><ul><li><strong>免费的，还是推荐临时用或不重要图片资源。</strong></li></ul><hr><p><strong>聚合图床 - 免费无限图片上传：</strong><a href="https://www.superbed.cn/">https://www.superbed.cn/</a></p><p><strong>魔法师图床：</strong><a href="https://tc.mofashi.ltd/">https://tc.mofashi.ltd/</a></p><p><strong>ImgBB — 免费图片存取&#x2F;上传图片：</strong><a href="https://imgbb.com/">https://imgbb.com/</a></p><p><strong>16图床，永久免费，无需登录的图床：</strong><a href="https://111666.best/">https://111666.best/</a></p><p><strong>路过图床：</strong><a href="https://imgse.com/">https://imgse.com/</a></p><p><strong>img131图床：</strong><a href="https://img.131213.xyz/">https://img.131213.xyz/</a></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 免费图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Hexo] 文章轮播</title>
      <link href="/Notepad/fe562d3d.html"/>
      <url>/Notepad/fe562d3d.html</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style> --><h2 id="关于文章轮播图"><a href="#关于文章轮播图" class="headerlink" title="关于文章轮播图"></a>关于文章轮播图</h2><p>本项目是对<code>冰卡诺老师</code>写的教程：基于<code>Butterfly主题</code>的轮播手动置顶文章进行重构，精简了部分样式。适配<code>pjax</code>。</p><h2 id="插件教程"><a href="#插件教程" class="headerlink" title="插件教程"></a>插件教程</h2><ol><li><p><strong>安装插件,在博客根目录[Blogroot]下打开终端，运行以下指令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-swiper --save</span><br></pre></td></tr></table></figure></li><li><p><strong>添加配置信息，以下为写法示例</strong></p></li></ol><ul><li><strong>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加。</strong><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-swiper</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/8e1264d1/</span></span><br><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">timemode:</span> <span class="string">date</span> <span class="comment">#date/updated</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">default_descr:</span> <span class="string">再怎么看我也不知道怎么描述它的啦！</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span> <span class="comment">#swiper css依赖</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span> <span class="comment">#swiper js依赖</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiperstyle.css</span> <span class="comment"># 适配主题样式补丁</span></span><br><span class="line">  <span class="attr">custom_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper_init.js</span> <span class="comment"># swiper初始化方法</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>参数释义</strong><table><thead><tr><th>参数</th><th>备选值&#x2F;类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>enable</td><td>true&#x2F;false</td><td>【必选】控制开关</td></tr><tr><td>enable_page</td><td>path&#x2F;all</td><td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填’&#x2F;‘,分类页面就填’&#x2F;categories&#x2F;‘。若要应用于所有页面，就填’all’，默认为all</td></tr><tr><td>timemode</td><td>date&#x2F;updated</td><td>【可选】时间显示，date为显示创建日期，updated为显示更新日期,默认为date</td></tr><tr><td>layout.type</td><td>id&#x2F;class</td><td>【可选】挂载容器类型，填写id或class，不填则默认为id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是layout.type为class，因为同一页面可能有多个class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>default_descr</td><td>text</td><td>默认文章描述</td></tr><tr><td>swiper_css</td><td>url</td><td>【可选】自定义的swiper依赖项css链接</td></tr><tr><td>swiper_js</td><td>url</td><td>【可选】自定义的swiper依赖项加js链接</td></tr><tr><td>custom_css</td><td>url</td><td>【可选】适配主题样式补丁</td></tr><tr><td>custom_js</td><td>url</td><td>【可选】swiper初始化方法</td></tr></tbody></table></li></ol><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ul><li><strong>在文章的<code>front_matter</code>中添加<code>swiper_index</code>配置项即可。</strong><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 创建日期</span><br><span class="line">updated: 更新日期</span><br><span class="line">cover: 文章封面</span><br><span class="line">description: 文章描述</span><br><span class="line"><span class="section">swiper<span class="emphasis">_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Hexo] Chenmm`s</title>
      <link href="/Notepad/a108f7a7.html"/>
      <url>/Notepad/a108f7a7.html</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style> --><h2 id="碎碎念念"><a href="#碎碎念念" class="headerlink" title="碎碎念念"></a>碎碎念念</h2><hr><table><thead><tr><th>属性</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>title:</td><td>xxx日记博客</td><td># 页面标题</td></tr><tr><td>cover:</td><td>‘url’</td><td># 缩略图</td></tr><tr><td>swiper_index:</td><td>10</td><td># 首页轮播图索引</td></tr><tr><td>top_group_index:</td><td>10</td><td># 首页卡片组索引</td></tr><tr><td>background:</td><td>‘#fff’</td><td># 页面背景色</td></tr><tr><td>date:</td><td>2024-09-07 09:00:00</td><td># 创建日期</td></tr><tr><td>updated:</td><td></td><td># 更新日期</td></tr><tr><td>tags:</td><td></td><td># 文章标签</td></tr><tr><td>categories:</td><td></td><td># 文章分类</td></tr><tr><td>keywords:</td><td></td><td># 关键字</td></tr><tr><td>description:</td><td></td><td># 页面描述</td></tr><tr><td>top:</td><td></td><td># 置顶标记</td></tr><tr><td>top_img:</td><td></td><td># 顶部图片</td></tr><tr><td>comments:</td><td></td><td># 显示评论(默认true)</td></tr><tr><td>toc:</td><td></td><td># 显示 TOC（默认设置）</td></tr><tr><td>toc_number:</td><td></td><td># TOC 序号（默认设置）</td></tr><tr><td>toc_style_simple:</td><td></td><td># 简洁模式 TOC</td></tr><tr><td>copyright:</td><td></td><td># 版权模块（默认设置）</td></tr><tr><td>copyright_author:</td><td></td><td># 版权作者</td></tr><tr><td>copyright_author_href:</td><td></td><td># 版权作者链接</td></tr><tr><td>copyright_url:</td><td></td><td># 版权链接</td></tr><tr><td>copyright_info:</td><td></td><td># 版权声明</td></tr><tr><td>mathjax:</td><td></td><td># 显示 MathJax（mathjax.per_page 为 false 时配置）</td></tr><tr><td>katex:</td><td></td><td># 显示 KaTeX（katex.per_page 为 false 时配置）</td></tr><tr><td>aplayer:</td><td></td><td># 加载 aplayer（参见音乐配置）</td></tr><tr><td>highlight_shrink:</td><td></td><td># 代码框是否展开（true&#x2F;false）</td></tr><tr><td>aside:</td><td></td><td># 显示侧边栏（默认 true）</td></tr><tr><td>ai:</td><td></td><td># AI 摘要</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Hexo] 主题背景一图流</title>
      <link href="/Notepad/ad420578.html"/>
      <url>/Notepad/ad420578.html</url>
      
        <content type="html"><![CDATA[<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><blockquote><p>本文会详细介绍其修改过程。</p></blockquote><p><img src="https://img.131213.xyz/api/cfile/AgACAgUAAx0Eflp52gACHUhm281XL3yJdAABTiTw6FqdsgcOF58AAvm-MRs9ztlWrMnvhfjEctQBAAMCAAN5AAM2BA" alt="bj.png"></p><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><blockquote><p>修改 <code>Butterfly</code> 的配置文件 <code>_config.butterfly.yml</code>。<br>编辑 <code>index_img</code>、<code>index_top_img_height</code>、<code>background</code>、<code>footer_bg</code>、<code>mask.header</code> 选项。<br>设置网站背景，将主页顶部图和页脚背景改为透明，调整主页顶部图高度，移除顶部图的黑色半透遮罩。<br><strong>(需要将示例地址替换为自己的图片地址。)</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">transparent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The height of top_img, eg: 300px/300em/300rem (主頁top_img高度)</span></span><br><span class="line"><span class="attr">index_top_img_height:</span> <span class="string">400px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The formal of image: url(本地或者网络/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">url(/img/background.jpg)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="string">transparent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add mask to header or footer (为 header 或 footer 添加黑色半透遮罩)</span></span><br><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="引入相关样式"><a href="#引入相关样式" class="headerlink" title="引入相关样式"></a>引入相关样式</h3><ul><li>新建一个文件，位于 <code>source/css/modify.styl</code>，并增加以下内容。</li><li>(此处只是举例，也可以使用已有的样式文件。)</li></ul><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;nib&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶部图</span></span><br><span class="line"><span class="selector-id">#page-header</span></span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.post-bg</span>, &amp;<span class="selector-class">.not-home-page</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">280px</span> <span class="meta">!important</span></span><br><span class="line">  <span class="selector-id">#post-info</span></span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">40px</span> <span class="meta">!important</span></span><br><span class="line">    <span class="attribute">text-align</span>: center</span><br><span class="line">  <span class="selector-id">#page-site-info</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">140px</span> <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>)</span><br><span class="line">    &amp;.not-home-page</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">200px</span> !important</span><br><span class="line">    #post-info</span><br><span class="line">      bottom: <span class="number">10px</span> !important</span><br><span class="line">    #page-site-info</span><br><span class="line">      top: <span class="number">100px</span> !important</span><br><span class="line"></span><br><span class="line">.top-img</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span></span><br><span class="line">  margin: -<span class="number">50px</span> -<span class="number">40px</span> <span class="number">50px</span></span><br><span class="line">  border-top-left-radius: inherit</span><br><span class="line">  border-top-right-radius: inherit</span><br><span class="line">  background-position: center center</span><br><span class="line">  background-size: cover</span><br><span class="line">  transition: all <span class="number">0.3s</span></span><br><span class="line"></span><br><span class="line">  @media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>)</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">230px</span></span><br><span class="line">    margin: -<span class="number">36px</span> -<span class="number">14px</span> <span class="number">36px</span></span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    filter: brightness(<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">// 页脚</span><br><span class="line">#footer:before</span><br><span class="line">  background-color: alpha(#FFF, .<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    background-color: alpha(#<span class="number">000</span>, .<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">#footer-wrap, #footer-wrap a</span><br><span class="line">  <span class="attribute">color</span>: #<span class="number">111</span></span><br><span class="line">  transition: unset</span><br><span class="line"></span><br><span class="line">  [data-theme=&#x27;dark&#x27;] &amp;</span><br><span class="line">    <span class="attribute">color</span>: var(--light-grey)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改-Butterfly-的配置文件-config-butterfly-yml，在-inject-head-选项引入样式"><a href="#修改-Butterfly-的配置文件-config-butterfly-yml，在-inject-head-选项引入样式" class="headerlink" title="修改 Butterfly 的配置文件 _config.butterfly.yml，在 inject.head 选项引入样式"></a>修改 <code>Butterfly</code> 的配置文件 <code>_config.butterfly.yml</code>，在 <code>inject.head</code> 选项引入样式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/modify.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Hexo 会将 Stylus 渲染成 CSS 文件，所以此处应为 <code>modify.css</code>。</p></blockquote><h3 id="增加插件脚本"><a href="#增加插件脚本" class="headerlink" title="增加插件脚本"></a>增加插件脚本</h3><blockquote><p>因为使用了 <code>cheerio</code> 来解析 <code>HTML</code>，所以需要先安装此依赖。</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cheerio</span><br></pre></td></tr></table></figure><ul><li>在hexo-blog&#x2F;source&#x2F;新建一个文件，位于 <code>scripts/modify.js</code>，并增加以下内容。</li><li>(此处只是举例，也可以使用已有的插件脚本文件。)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; filter &#125; = hexo.<span class="property">extend</span>;</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在页面插入新顶部图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">cheerio.Root</span>&#125; $ Root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertTopImg</span>(<span class="params">$</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> header = $(<span class="string">&#x27;#page-header&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (header.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> background = header.<span class="title function_">css</span>(<span class="string">&#x27;background-image&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!background) <span class="keyword">return</span>;</span><br><span class="line">    $(<span class="string">&#x27;#post, #page, #archive, #tag, #category&#x27;</span>).<span class="title function_">prepend</span>(<span class="string">`&lt;div class=&quot;top-img&quot; style=&quot;background-image: <span class="subst">$&#123;background&#125;</span>;&quot;&gt;&lt;/div&gt;`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 HTML</span></span><br><span class="line">filter.<span class="title function_">register</span>(<span class="string">&#x27;after_render:html&#x27;</span>, <span class="function">(<span class="params">str, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(str, &#123;</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">insertTopImg</span>($);</span><br><span class="line">    <span class="keyword">return</span> $.<span class="title function_">html</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h1><blockquote><p>👏 恭喜你完成了修改，可以使用以下命令进行预览。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xyz123测试</title>
      <link href="/Notepad/15edad24.html"/>
      <url>/Notepad/15edad24.html</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style> --><h3 id="1-修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成华为云镜像源。打开CMD窗口，运行如下命令"><a href="#1-修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成华为云镜像源。打开CMD窗口，运行如下命令" class="headerlink" title="1.修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成华为云镜像源。打开CMD窗口，运行如下命令"></a>1.修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成华为云镜像源。打开CMD窗口，运行如下命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://mirrors.huaweicloud.com/repository/npm/</span><br></pre></td></tr></table></figure><h2 id="2-配置-Git-密钥并连接至-Github"><a href="#2-配置-Git-密钥并连接至-Github" class="headerlink" title="2.配置 Git 密钥并连接至 Github"></a>2.配置 Git 密钥并连接至 Github</h2><blockquote><p>常用 Git 命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config -l  //查看所有配置</span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure><ul><li>测试链接是否成功！</li></ul><blockquote><p>ssh -T <a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;">&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi zhouvs! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h2 id="3-创建仓库并推送代码"><a href="#3-创建仓库并推送代码" class="headerlink" title="3.创建仓库并推送代码"></a>3.创建仓库并推送代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog-demo                                                                                             </span><br><span class="line">cd blog-demo                                                                                               </span><br><span class="line">git init                                                                                                   </span><br><span class="line">touch README.md                                                                                            </span><br><span class="line">git add README.md                                                                                          </span><br><span class="line">git commit -m &quot;first commit&quot;                                                                               </span><br><span class="line">git remote add origin https://github.com/zhouvs/blog-demo.git                                              </span><br><span class="line">git push -u origin master                                                                                  </span><br></pre></td></tr></table></figure><h2 id="4-创建本地仓库并推送至-Github"><a href="#4-创建本地仓库并推送至-Github" class="headerlink" title="4.创建本地仓库并推送至 Github"></a>4.创建本地仓库并推送至 Github</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog-demo                                                                                             </span><br><span class="line">cd blog-demo                                                                                               </span><br><span class="line">git init                                                                                                   </span><br><span class="line">touch README.md                                                                                            </span><br><span class="line">git add README.md                                                                                          </span><br><span class="line">git commit -m &quot;first commit&quot;                                                                               </span><br><span class="line">git remote add origin https://github.com/zhouvs/blog-demo.git                                              </span><br><span class="line">git push -u origin master                                                                                  </span><br></pre></td></tr></table></figure><h2 id="5-克隆仓库"><a href="#5-克隆仓库" class="headerlink" title="5.克隆仓库"></a>5.克隆仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zhouvs/blog-demo.git                                                           </span><br></pre></td></tr></table></figure><h2 id="6-创建新分支并切换"><a href="#6-创建新分支并切换" class="headerlink" title="6.创建新分支并切换"></a>6.创建新分支并切换</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev                                                                                              </span><br><span class="line">git checkout dev                                                                                            </span><br></pre></td></tr></table></figure><h2 id="7-创建新文件并提交"><a href="#7-创建新文件并提交" class="headerlink" title="7.创建新文件并提交"></a>7.创建新文件并提交</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch index.html                                                                                           </span><br><span class="line">git add index.html                                                                                         </span><br><span class="line">git commit -m &quot;add index.html&quot;                                                                              </span><br></pre></td></tr></table></figure><h2 id="8-推送至远程仓库"><a href="#8-推送至远程仓库" class="headerlink" title="8.推送至远程仓库"></a>8.推送至远程仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev                                                                                        </span><br></pre></td></tr></table></figure><h2 id="9-创建-Pull-Request"><a href="#9-创建-Pull-Request" class="headerlink" title="9.创建 Pull Request"></a>9.创建 Pull Request</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master                                                                                     </span><br><span class="line">git checkout master                                                                                         </span><br><span class="line">git merge dev                                                                                               </span><br><span class="line">git push origin master                                                                                     </span><br></pre></td></tr></table></figure><h2 id="10-删除远程分支"><a href="#10-删除远程分支" class="headerlink" title="10.删除远程分支"></a>10.删除远程分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete dev                                                                               </span><br></pre></td></tr></table></figure><h2 id="11-删除本地分支"><a href="#11-删除本地分支" class="headerlink" title="11.删除本地分支"></a>11.删除本地分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev                                                                                          </span><br></pre></td></tr></table></figure><h2 id="12-撤销上一次提交"><a href="#12-撤销上一次提交" class="headerlink" title="12.撤销上一次提交"></a>12.撤销上一次提交</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^                                                                                     </span><br></pre></td></tr></table></figure><h2 id="13-撤销所有未提交的修改"><a href="#13-撤销所有未提交的修改" class="headerlink" title="13.撤销所有未提交的修改"></a>13.撤销所有未提交的修改</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard                                                                                           </span><br></pre></td></tr></table></figure><h2 id="14-创建新分支并推送至远程仓库"><a href="#14-创建新分支并推送至远程仓库" class="headerlink" title="14.创建新分支并推送至远程仓库"></a>14.创建新分支并推送至远程仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev                                                                                         </span><br><span class="line">git push origin dev                                                                                        </span><br></pre></td></tr></table></figure><h2 id="15-创建新分支并推送至远程仓库（指定远程分支）"><a href="#15-创建新分支并推送至远程仓库（指定远程分支）" class="headerlink" title="15.创建新分支并推送至远程仓库（指定远程分支）"></a>15.创建新分支并推送至远程仓库（指定远程分支）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev origin/master                                                                          </span><br><span class="line">git push origin dev                                                                                        </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阳光不燥，微风正好</title>
      <link href="/Notepad/b8cf1317.html"/>
      <url>/Notepad/b8cf1317.html</url>
      
        <content type="html"><![CDATA[<p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。<br>宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 碎碎念念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
